#!/usr/bin/env python
'''Fix the case of all C/C++ include statements'''

import os
import re
import sys
import fileinput

def log(s):
  print>>sys.stderr, s

include_pattern = re.compile(r'^#include\s+(["<])([\w/.]+)([">])\s*$')
bases = [os.path.dirname(os.path.dirname(__file__))]

def find(head,tail):
  head,tail = os.path.split(path)
  for base in bases:
    for f in os.listdir(os.path.join(base,head)):
      if f.lower()==tail.lower():
        return f
  log("couldn't find '%s'"%path)
  return tail

fixed = {'':''}
for h in 'Object Ref Ptr Buffer exceptions repr new'.split():
  fixed['geode/python/%s.h'%h] = 'geode/utility/%s.h'%h
for h in 'forward from_python to_python wrap stl numpy module Class function cast'.split():
  fixed['geode/python/%s.h'%h] = None
fixed['geode/utility/tr1.h'] = 'geode/utility/unordered.h'
fixed['geode/array/convert.h'] = None

def fix(path):
  try:
    return fixed[path]
  except KeyError:
    head,tail = os.path.split(path)
    tail = find(head,tail)
    fixed[path] = os.path.join(fix(head),tail)
    return fixed[path]

for line in fileinput.input(inplace=1):
  # Fix case of includes
  m = include_pattern.match(line)
  if m:
    scope = m.group(1)
    path = m.group(2) 
    if scope=='"':
      name = fileinput.filename()
      if 'random123' not in name:
        log('relative include in %s: "%s"'%(name,path))
    elif path in fixed:
      correct = fixed[path]
      if correct is None:
        continue # Delete the include
      line = '#include <%s>\n'%correct
    elif path.lower().startswith('other/'):
      line = '#include <%s>\n'%os.path.normpath(fix(path))

  # Make sure all lines end with a newline
  if not line.endswith('\n'):
    line += '\n'
  print line,
